{"version":3,"sources":["logo.svg","Description.js","IssueData.js","List.js","ListRoute.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Description","props","state","descriptionList","id","name","description","getDescription","bind","issueId","this","find","item","match","params","number","selectedItem","console","log","className","to","React","Component","List","list","filtered","showList","handleChange","hideList","setState","nextProps","e","newList","target","value","filter","lc","toLowerCase","includes","listStyle","width","border","display","type","onChange","placeholder","onFocus","onBlur","style","map","index","background","key","onMouseDown","stopPropagation","preventDefault","ListRoute","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e46e8d3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport List from './List'\r\nimport * as IssueData from './IssueData'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass Description extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      descriptionList: IssueData.issueList()\r\n    };\r\n    this.getDescription = this.getDescription.bind(this)\r\n  }\r\n \r\n  getDescription(issueId){\r\n    var selectedItem = this.state.descriptionList.find((item)=>{return item.id == issueId})\r\n    return selectedItem;\r\n  }\r\n\r\n  render() {\r\n    var issueId = this.props.match && this.props.match.params.number;\r\n    var selectedItem = this.getDescription(issueId)\r\n    console.log(this.props.match)\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"container\">\r\n          <section className=\"section\">\r\n                <b>{selectedItem.name}</b>\r\n                <br/>\r\n                <code>{selectedItem.description}</code>\r\n          </section>\r\n          <hr />\r\n          <Link to='/issue'>Back</Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Description;","export function issueList() {\r\n    return (\r\n        [\r\n            { id: 1, name: \"Issue#1: Database Connectivity Failure\", description:\"Error: Invalid username / password : :<error information> :\" },\r\n\r\n            { id: 2, name: \"Issue#2: RestAPI call made and couldn't fetch any data\", description:\"Error: Invalid username / password : :<error information> :\" },\r\n\r\n            { id: 3, name: \"Issue#3: External API call authorization failed\", description:\"Error: Invalid username / password : :<error information> :\" },\r\n\r\n            { id: 4, name: \"Issue#4: Database servers are down\", description:\"Error: Invalid username / password : :<error information> :\" },\r\n\r\n            { id: 5, name: \"Issue#5: UI rendering error\", description:\"Error: Invalid username / password : :<error information> :\" }\r\n        ]\r\n    )\r\n}","import React from 'react';\r\nimport './App.css'\r\nimport * as IssueData from './IssueData'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Description from './Description';\r\n\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: IssueData.issueList(),\r\n            filtered: [],\r\n            showList: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.showList = this.showList.bind(this)\r\n        this.hideList = this.hideList.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            filtered: this.state.list\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            filtered: nextProps.list\r\n        });\r\n    }\r\n\r\n    handleChange(e) {\r\n        // Variable to hold the original version of the list\r\n        let currentList = [];\r\n        // Variable to hold the filtered list before putting into state\r\n        let newList = [];\r\n\r\n        // If the search bar isn't empty\r\n        if (e.target.value !== \"\") {\r\n            // Assign the original list to currentList\r\n            currentList = this.state.list;\r\n\r\n            // Use .filter() to determine which items should be displayed\r\n            // based on the search terms\r\n            newList = currentList.filter(item => {\r\n                // change current item to lowercase\r\n                const lc = item.name.toLowerCase();\r\n                // change search term to lowercase\r\n                const filter = e.target.value.toLowerCase();\r\n                // check to see if the current list item includes the search term\r\n                // If it does, it will be added to newList. Using lowercase eliminates\r\n                // issues with capitalization in search terms and search content\r\n                return lc.includes(filter);\r\n            });\r\n        } else {\r\n            // If the search bar is empty, set newList to original task list\r\n            newList = this.state.list;\r\n        }\r\n        // Set the filtered state based on what our rules added to newList\r\n        this.setState({\r\n            filtered: newList\r\n        });\r\n    }\r\n\r\n    showList(){\r\n        this.setState({\r\n            showList: true\r\n        })\r\n    }\r\n\r\n    hideList(){\r\n        this.setState({\r\n            showList:false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        var listStyle = { width: '400px', border: '1px solid'}\r\n        listStyle = this.state.showList ? {...listStyle, ...{display:\"block\"}} : {...listStyle, ...{display:\"none\"}}\r\n        return (\r\n            <div>\r\n                <input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search...\"  onFocus={this.showList} onBlur={this.hideList}/>\r\n                <ul style={listStyle}>\r\n                    {this.state.filtered && this.state.filtered.map((item, index) => {\r\n                        var style = (index == 0) ? { background: 'cyan' } : {};\r\n                        return (\r\n                            <div style={style}>\r\n                                <Link to={`/issue/${item.id}`} key={item.id} id={item.id} onMouseDown={(e)=>{e.stopPropagation();e.preventDefault();}}>\r\n                                    {item.name}\r\n                                </Link>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport List from './List'\r\nimport Description from './Description'\r\n\r\n// The Roster component matches one of two different routes\r\n// depending on the full pathname\r\nconst ListRoute = () => (\r\n  <Switch>\r\n    <Route exact path='/issue' component={List}/>\r\n    <Route path='/issue/:number' component={Description}/>\r\n  </Switch>\r\n)\r\n\r\nexport default ListRoute;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListRoute from './ListRoute'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n \n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"container\">\n          <section className=\"section\">\n            <ul>\n              <li><Link to='/'>Home</Link></li>\n              <li><Link to='/issue'>Issues</Link></li> \n            </ul>\n          </section>\n          <hr />\n        </div>\n        <main>\n          <Switch>\n            {/* <Route exact path='/' component={App}/> */}\n            <Route path='/issue' component={ListRoute}/>\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(  <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}